#!/usr/bin/ python

import sys
import os
import re
import sqlite3
import operator
import nltk
from nltk.tag.simplify import simplify_wsj_tag

conn = sqlite3.connect("cerebrum.db")
cursor = conn.cursor()

def config():
	conn = sqlite3.connect("cerebrum.db")
	cursor = conn.cursor()
	cursor.execute("""CREATE TABLE commands (
					id INTEGER PRIMARY KEY,
					ADJ text,
					ADV text,
					CNJ text,
					DET text,
					EX text,
					MOD text,
					N text,
					NP text,
					NUM text,
					PRO text,
					P text,
					T0 text,
					UH text,
					V text,
					VD text,
					VG text,
					VN text,
					WH text,
					module text
					) 
					""")
	conn.close()
	
def tag(input):
	tokens = nltk.word_tokenize(input)
	tagged = nltk.pos_tag(tokens)
	simplified = [(word, simplify_wsj_tag(tag)) for word, tag in tagged]
	
	return simplified
	
def addmodule(module, example):
	tagged = tag(example)
	indx = nltk.Index((value, key) for (key, value) in tagged)
	cursor.execute("INSERT INTO commands (ADJ, ADV, CNJ, DET, EX, MOD, N, NP, NUM, PRO, P, T0, UH, V, VD, VG, VN, WH, module) VALUES ('"+str(",".join(indx["ADJ"]))+"', '"+str(",".join(indx["ADV"]))+"', '"+str(",".join(indx["CNJ"]))+"', '"+str(",".join(indx["DET"]))+"', '"+str(",".join(indx["EX"]))+"', '"+str(",".join(indx["MOD"]))+"', '"+str(",".join(indx["N"]))+"', '"+str(",".join(indx["NP"]))+"', '"+str(",".join(indx["NUM"]))+"', '"+str(",".join(indx["PRO"]))+"', '"+str(",".join(indx["P"]))+"', '"+str(",".join(indx["TO"]))+"', '"+str(",".join(indx["UH"]))+"', '"+str(",".join(indx["V"]))+"', '"+str(",".join(indx["VD"]))+"', '"+str(",".join(indx["VG"]))+"',  '"+str(",".join(indx["VN"]))+"',  '"+str(",".join(indx["WH"]))+"', '"+module+"')")
	conn.commit()

def think(input):
	
	# analyze input
	tagged = tag(input)
	indx = nltk.Index((value, key) for (key, value) in tagged)
	
	qp = ""
	for verb in indx["V"]:
		qp = qp+" V LIKE '%"+verb+"%' OR"
	qp = qp.strip("OR")
	
	# match interpreted data to command
	potentials = ("unknown", 0)
	query = "SELECT * FROM commands WHERE "+qp
	for row in cursor.execute(query):
		strength = 1
		for i in indx["ADJ"]:
			if i in row[1]:
				strength = strength + 1
		for i in indx["ADV"]:
			if i in row[2]:
				strength = strength + 1
		for i in indx["CNJ"]:
			if i in row[3]:
				strength = strength + 1
		for i in indx["DET"]:
			if i in row[4]:
				strength = strength + 1
		for i in indx["EX"]:
			if i in row[5]:
				strength = strength + 1
		for i in indx["MOD"]:
			if i in row[6]:
				strength = strength + 1
		for i in indx["N"]:
			if i in row[7]:
				strength = strength + 3
		for i in indx["NP"]:
			if i in row[8]:
				strength = strength + 1
		for i in indx["NUM"]:
			if i in row[9]:
				strength = strength + 1
		for i in indx["PRO"]:
			if i in row[10]:
				strength = strength + 1
		for i in indx["P"]:
			if i in row[11]:
				strength = strength + 1
		for i in indx["TO"]:
			if i in row[12]:
				strength = strength + 1
		for i in indx["UH"]:
			if i in row[13]:
				strength = strength + 1
		for i in indx["V"]:
			if i in row[14]:
				strength = strength + 1
		for i in indx["VD"]:
			if i in row[15]:
				strength = strength + 1
		for i in indx["VG"]:
			if i in row[16]:
				strength = strength + 1
		for i in indx["VN"]:
			if i in row[17]:
				strength = strength + 1
		for i in indx["WH"]:
			if i in row[18]:
				strength = strength + 1
		potentials = potentials, (row[19], strength)
	
	bestmatch = max(potentials, key=operator.itemgetter(1))
	module = bestmatch[0]
	os.system("python modules/"+module)

	# os.system("python modules/%s" % (module))
	# os.system("python modules/%s|espeak" % (module))


input = sys.argv[1]
input = str.lower(input)

if input == "addcommand":
	module = sys.argv[2]
	example = sys.argv[3]
	
	addmodule(module, example)
elif input == "config":
	config()
else:
	think(input)
